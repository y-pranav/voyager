version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: ai-trip-planner-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: tripplanner
    volumes:
      - mongodb_data:/data/db
    networks:
      - ai-trip-planner

  # MongoDB Admin UI (Optional)
  mongo-express:
    image: mongo-express:1-20-alpine3.18
    container_name: ai-trip-planner-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongodb
    networks:
      - ai-trip-planner

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ai-trip-planner-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/tripplanner?authSource=admin
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AMADEUS_API_KEY=${AMADEUS_API_KEY}
      - AMADEUS_API_SECRET=${AMADEUS_API_SECRET}
      - SERPAPI_API_KEY=${SERPAPI_API_KEY}
    volumes:
      - ./backend:/app
      - /app/__pycache__
    depends_on:
      - mongodb
    networks:
      - ai-trip-planner

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ai-trip-planner-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - ai-trip-planner

volumes:
  mongodb_data:

networks:
  ai-trip-planner:
    driver: bridge
